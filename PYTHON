NOTLAR:
        a = "Mustafa Demir"

    print(a.strip()) 	# cümlenin başında veya sonunda boşluk varsa bunları kaldırır.
    print(a.lower())	# a kelimesindeki tüm harflari küçük yazar.
    print(a.upper())	# a kelimesindeki tüm hafleri büyük yazar.
    x = a.replace("H","J")  # a kelimesindeki tüm H leri J yapar.

    x = "taf" in a		# eğer a kelimesinin içinde taf varsa print(x) true yazar. 
    print(x)

    ////////////////////

    txt = "Merhaba, benim yasim {}"		#txt.format() diyerek süslü parantez içine sayi1 yazdırıyoz.
    yas1 = 22			
    print(txt.format(yas1))	

    //////////////////////

    \o110 = H 	#\o octal değeri girer.
    \x65 = A	#\x hex değeri verir
    \b 		#backspace yapar

    /////////////////////////////////

    degisken = sorted(degisken) 	#sayilari küçükten büyüğe dizmek için
    liste = ["xyz","abc","def"]
    liste.append("Yeni eleman")	#listenin sonuna yeni eleman ekler
    liste.insert(1,"Yeni eleman")	#listenin 1. indexine elemanı ekler
    liste.remove("eleman 2")	#listeden istediğimiz elemanı kaldırırız.
    del liste[1]			#listeden istediğimiz indexteki elemanı silmek için
    liste.pop()			#listenin sonuncu elemanını silmek için
    liste.clear()			#tüm listeyi silmek için
    liste3 = liste2 + liste1	#listeleri ardarda ekleyebiliriz
    liste.sort()			#listeyi alfabetik sıralamak için
    liste.reverse			#listeyi tersten sıralamak için
    //////////////////////////////////////////////////////////////////////
    tuple
    tuple = ("xyz","abc","def")	# tuple da yeni eleman ekleme, değiştirme ve silme olmaz. Tanımlandıktan sonra değiştirelemez bir yapıdadır.
    /////////////////////////////////////////////////////////////////////
    Sets
    sıralı değil ve her elemanı eşsiz.
    Elemanlar değiştirilemez ancak yeni eleman eklenebilir ve silinebilir.
    Indeksleri yok.
    set = {1,2,3}
    set = {1.0,"Hello",(1,2,3)}
    ////////////////////////////////////////////////
    birleşim kümesi -> print(A/B)
    kesişim kümesi -> print(A&B)
    fark işlemi -> print(A-B)
    simetrik fark. birleşim kümesi - kesişim kümesi = print(A^B)
    //////////////////////////////////////////////////////
    sozluk1.update(sozluk2)		#sozluk2 yi sozluk1'e eklemek için
    list(set(list1).intersection(list2))	#listeler içindeki ortak elemanları bulmak için
    ////////////////////////////////////////////////////////////////
    2 LİSTE ARASINDAKİ ORTAK ELEMANLARI BULMA:
    def common_member(a, b):   
    a_set = set(a)
    b_set = set(b)
     
    # check length
    if len(a_set.intersection(b_set)) > 0:
        return(a_set.intersection(b_set)) 
    else:
        return("no common elements")

    a = [1, 2, 3, 4, 5]
    b = [5, 6, 7, 8, 9]
    print(common_member(a, b))
  
    a =[1, 2, 3, 4, 5]
    b =[6, 7, 8, 9]
    print(common_member(a, b))
    
    
    







HAFTA-5 : CLASS ANLATIMI,CONSTRUCTOR,DESTRUCTOR,PRİVATE :
    ## def isimDüzelt(self,isimArg) fonksiyonunu yazarken her zaman self'i kullanırız. self işaretçi olarak bulunur.
    EXP:
    class insanlar:                  
          isim = ""
          soyİsim = ""
          yas = ""
          def isimDüzelt(self,isimArg):
              self.isim = isimArg
          def soyİsimDüzelt(self,soyİsimArg):
              self.soyİsim = soyİsimArg
          def yasDüzelt(self,yasArg):
              self.yas = yasArg
    insanObjesi1 = insanlar()
    insanObjesi1.isimDüzelt("Mustafa")
    insanObjesi1.soyİsimDüzelt("Demir")
    insanObjesi1.yasDüzelt(22)
    print(insanObjesi1.isim)
    print(insanObjesi1.soyİsim)
    print(insanObjesi1.yas)




    CONSTRUCTOR :                 ## constructor ilk atama yapılacağı zaman kullanılır.
    def __init__(self,isimArg):
        self.isim = isimArg
    EXP:
    class kisi:
        isim = ""
        def __init__(self,isimArg):
            self.isim = isimArg
        def testMesaji(self):
            print("Merhaba benim adım ",self.isim)    
    insan1 = kisi("Mustafa")
    kisi.testMesaji()
    
    EXP:
    class kopek:
        def __init__(self,cinsi,rengi):
            self.cins = cinsi           ## __init__ olduğu için başta cins ve renk yazmamıza gerek yok.
            self.renk = rengi
        def renkDegis(self,rengi):
            self.renk = rengi
    kopek1 = kopek("Pitbull","Siyah")
    kopek2 = kopek("BullDog","Kahverengi")
    kopek1.renkDegis("beyaz")
    print("Birinci kopek bilgileri:")
    print("Cinsi:",kopek1.cins,"Rengi:",kopek1.renk)
    print("İkinci kopek bilgileri:")
    print("Cinsi:",kopek2.cins,"Rengi:",kopek2.renk)
    
    EXP:
    class toplama:
    birinci = 0
    ikinci = 0
    toplam = 0
    def __init__(self,f,s):
        self.birinci = f
        self.ikinci = s
    def toplama(self):
        self.sonuc = self.birinci + self.ikinci
    def goster(self):
        print("Birinci Sayi:",self.birinci)
        print("İkinci Sayi:",self.ikinci)
        print("Toplam Sayi:",self.sonuc)
    islem1 = toplama(1000,2000)
    islem1.toplama()
    islem1.goster()
    
    
    
    
    
    
    DESTRUCTOR:
    EXP:            ## destructor bir kodla işimize bittiğinde RAM'de daha fazla yer kaplamasın diye slinmesi için kullanılır. (def __del__)
        class calisanlar:
            def __init__(self):
                print("calisan olusturuldu.")
            def __del__(self):
                print("Destructor çagirildi. Calisan objesi silindi.")
        obj = calisanlar()
        del obj
    
    EXP:
    class calisanlar:
        def __init__(self):
            print("calisan olusturuldu")
        def __del__(self):
            print("Destructor çagirildi.")
    def testFonksiyonu():
        print("Calisan olusturulacak.")
        calisan = calisanlar()          ##fonksiyon bittikten sonra calisan class ı ile iş bittiği için otomatik destructor çalışır ve class ı siler.
        print("Fonksiyon bitimi...")
    print("Test fonksiyonu cagirilacak.")
    testFonksiyonu()
    print("program bitimi")
    
    PRİVATE:
    EXP:
        class calisanlar:
            def __isimAyarla(isimArg):  ##__isimAyarla fonksiyonu private tanımlanmış. Yani sadece sınıf içindeki diğer fonksiyonlar tarafından çağırılabilir.
                self.isim=isimArg
            def __init__(self,isimArg,maasArg):
                self.isim = isimArg
                self.__maas=maasArg     ##__maas degiskenine erişilmeye çalışıldığında hata alınacaktır. 
        calisan1 = calisanlar("Ahnet",4500)
        print(calisan1.isim)
        print(calisan1._maas)
    
    EXP: # PRİVATE
    class laptop:
        isim = ""
        islemci = ""
        frekans = ""
        def baslat(self):
            print("Laptop",self.isim,"baslatiliyor...")
        def  yenidenBaslat(self):
            print("Laptop",self.isim,"yeniden baslatiliyor...")
        def detaylariGetir(self):
            print("Laptop adi:",self.isim)
            print(self.islemci,"islemcisine sahiptir.")
            islemciGucu = self.frekans * 10
            print("İslemci gücü",islemciGucu,"sahiptir")

    laptop1 = laptop()
    laptop1.isim = "HP"
    laptop1.islemci = "Intel Core i7"
    laptop1.frekans = 2.5
    laptop1.baslat()
    laptop1.yenidenBaslat()
    laptop1.detaylariGetir()
    
    EXP:
    class kargo:
        kargoNo = ""
        kargoDesi = ""
        kargoKg = ""
        def __init__(self,kargoNoArg,kargoDesiArg,kargoKgArg):
            self.kargoNo = kargoNoArg
            self.kargoDesi = kargoDesiArg
            self.kargoKg = kargoKgArg
        def kargoUcretHesaplama(self):
            ucret = self.kargoDesi/3 * self.kargoKg*2
            print(self.kargoNo,"numarali kargo icin hesaplanan ücret",ucret)

    kargo1 = kargo(1234,5,10)
    kargo2 = kargo(1235,3,2)
    kargo3 = kargo(1236,4,5)
    kargo4 = kargo(1237,6,7)
    kargo5 = kargo(1238,8,9)
    kargoListesi = [kargo1,kargo2,kargo3,kargo4,kargo5]
    for x in kargoListesi:
        x.kargoUcretHesaplama() 



HAFTA-8: KALITIM(INHERITANCE)

private degisken:
    def __isimAyarla(isimArg):  ##sadece kendi sınıfı içindeki diğer fonksiyonlar erişebilir. Dışardan çalişan1.__isimAyarla() diye çağırılamaz.
        self.isim = isimArg
        
        
      
HAFTA-9: DECORATOR
        def genelDecorator(func):
                def geriDonecekFonksiyon(*args, **kwargs):
                print("Herhangi bir fonksiyon icin calisabilir")
                return func(*args, **kwargs)
        return geriDonecekFonksiyon


        

    
      
  
          
 
